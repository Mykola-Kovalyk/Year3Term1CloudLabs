---
name: Build and Push Image to Google Cloud Platform
on:
  pull_request:
    branches: [ master ]
jobs:
  build-push-gcr:
    name: Build and Push to GCP
    runs-on: ubuntu-latest
    env:
      PROJECT_ID: terraform-408207
      IMAGE_NAME: mysqlspringlab
      REGISTRY_LOCATION: us-central1-docker.pkg.dev
      REGISTRY_NAME: mysqlspringlab-repository
      CLUSTER_NAME: primary
      CLUSTER_LOCATION: us-central1-a
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        project_id: ${{ env.PROJECT_ID }}
        credentials_json: ${{ secrets.GH_ACTIONS_SERVICE_ACCOUNT_KEY }}
      
    - name: Configure gcloud CLI
      run: |-
        gcloud config set project ${{ env.PROJECT_ID }}

    - name: Setup Terraform with specified version on the runner
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.3.0

    - name: Terraform Init
      run: terraform -chdir=terraform init 
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GH_ACTIONS_SERVICE_ACCOUNT_KEY }}

    - name: Terraform Plan
      run: TF_VAR_mysql_user='${{ secrets.MYSQL_USER }}' TF_VAR_mysql_password='${{ secrets.MYSQL_PASSWORD }}' terraform -chdir=terraform plan
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GH_ACTIONS_SERVICE_ACCOUNT_KEY }}

    - name: Terraform Apply
      run: TF_VAR_mysql_user='${{ secrets.MYSQL_USER }}' TF_VAR_mysql_password='${{ secrets.MYSQL_PASSWORD }}' terraform -chdir=terraform apply -auto-approve
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GH_ACTIONS_SERVICE_ACCOUNT_KEY }}

    - name: Build Docker Image
      run: |-
        python -c "import os; file = open('deployed-instance.json', 'w'); file.write(os.environ['DEPLOYED_INSTANCE_ACCOUNT_KEY']); file.close()"
        docker build -t ${{ env.IMAGE_NAME }}:latest . --build-arg SRC=mysqlspringlab --build-arg GCP_CREDENTIALS="deployed-instance.json" 
        rm deployed-instance.json
      env:
        DEPLOYED_INSTANCE_ACCOUNT_KEY : ${{secrets.DEPLOYED_INSTANCE_SERVICE_ACCOUNT_KEY}}

    - name: Configure Docker Client
      run: |-
        gcloud auth configure-docker ${{ env.REGISTRY_LOCATION }} --quiet
      
    - name: Set registry path
      run: |-
        echo "CONTAINER_LINK=${{ env.REGISTRY_LOCATION }}/${{ env.PROJECT_ID }}/${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}" >> $GITHUB_ENV


    - name: Tag Docker image and push to Google Artifact Registry
      run: |-
        docker tag ${{ env.IMAGE_NAME }}:latest ${{ env.CONTAINER_LINK }}:${{ github.sha }}
        docker tag ${{ env.IMAGE_NAME }}:latest ${{ env.CONTAINER_LINK }}:latest
        docker push ${{ env.CONTAINER_LINK }}:${{ github.sha }}
        docker push ${{ env.CONTAINER_LINK }}:latest        
      
    - id: 'get-credentials'
      uses: 'google-github-actions/get-gke-credentials@v1'
      with:
        cluster_name: ${{ env.CLUSTER_NAME }}
        location: ${{ env.CLUSTER_LOCATION }}
    - name: Apply kubernetes deployment
      run: |-
         envsubst < k8s/deployment.yaml | kubectl apply -f -
      env:
        CONTAINER: ${{ env.CONTAINER_LINK }}:latest
    - name: Apply kubernetes service
      run: |-
        kubectl apply -f k8s/service.yaml
    - name: Apply kubernetes autoscaler
      run: |-
        kubectl apply -f k8s/autoscaler.yaml